const { oneLine } = require('common-tags');
const Command = require('../base');

module.exports = class EnableCommandCommand extends Command {
	constructor(client) {
		super(client, {
			name: 'enable',
			aliases: ['enable-command', 'cmd-on', 'command-on'],
			group: 'commands',
			memberName: 'enable',
			description: 'Aktiviert einen Befehl oder eine Gruppe.',
			details: oneLine`
				Das Argument muss der Name / die ID (teilweise oder ganz) eines Befehls oder einer Befehlsgruppe sein.
				Nur Administratoren dürfen diesen Befehl verwenden.
			`,
			examples: ['enable util', 'enable Utility', 'enable prefix'],
			guarded: true,

			args: [
				{
					key: 'cmdOrGrp',
					label: 'command/group',
					prompt: 'Welchen Befehl oder welche Gruppe möchtest du aktivieren?',
					type: 'group|command'
				}
			]
		});
	}

	hasPermission(msg) {
		if(!msg.guild) return this.client.isOwner(msg.author);
		return msg.member.hasPermission('ADMINISTRATOR') || this.client.isOwner(msg.author);
	}

	run(msg, args) {
		const group = args.cmdOrGrp.group;
		if(args.cmdOrGrp.isEnabledIn(msg.guild, true)) {
			return msg.reply(
				`\`${args.cmdOrGrp.name}\` ${args.cmdOrGrp.group ? 'Dieser Befehl' : 'Diese Gruppe'} ist bereits aktiviert${
					group && !group.enabled ? `, die \`${group.name}\` Gruppe jedoch deaktiviert und kann deswegen nicht verwendet werden.` : ''
				}.`
			);
		}
		args.cmdOrGrp.setEnabledIn(msg.guild, true);
		return msg.reply(
			`\`${args.cmdOrGrp.name}\` ${group ? 'Befehl' : 'Gruppe'} wurde aktiviert${
				group && !group.enabled ? `, die \`${group.name}\` Gruppe ist jedoch deaktiviert und kann deswegen nicht verwendet werden.` : ''
			}.`
		);
	}
};
